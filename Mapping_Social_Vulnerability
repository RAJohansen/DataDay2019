#######################
###  Data Day 2019  ###
###  Power Session  ###
#######################

# Title: Interactive mapping of social vulnerability caused by climate change using R
# Authors: Richard Johansen & Mark Chalmers
# University of Cincinnati Libraries
# 4/1/2019

# Social Vulnerability Data: http://artsandsciences.sc.edu/geog/hvri
# Code: https://github.com/RAJohansen/DataDay2019

######################### PART 0 :Introduction to R ############################ 

# R as a Calculator
1 + 3

# Creating objects in R
# Hint alt - is a shortcut for the < - 
x <- 1+2
x
y <- x +1
y

# Getting Help in R
help(mean)
#HINT: if you can't remember exactly what function you are looking for, Use Tab
me "Tab"

#Not sure what its called 
#Try a fuzzy search
apropos("mea") 

# Viewing & Examinging a Data set
# Lets explore data using a data set thats contained in R
mtcars  <- mtcars

# View our table
# Or click the df object under the data window
View(mtcars)

# Use the names() function to return a list the variables 
names(mtcars)

#Look at the data types or structure of the data
str(mtcars)
# This is very useful when we analyzing or visualizing data
# Make sure your variables are in the appropiate format!!

## Quick and simple statistical summary of the data
summary(mtcars)

# Finding values from out data table
# Lets look at column 2 
mtcars[,2]

# Lets look at row 5
mtcars[5,]

# What value is in row 5 column 3?
mtcars[5,3]

# What if we want to know the max mpg
max(mtcars$mpg)

##################### PART  I: Plotting using Base R ############################ 

### Default Plot
plot(mtcars$mpg)

## Dotchart ##
dotchart(mtcars$mpg, labels=row.names(mtcars))

## Histogram ##
hist(mtcars$mpg)

# Colored Histogram with Different Number of Bins
hist(mtcars$mpg, breaks=10)

## Scatterplot ##
plot(mtcars$wt,mtcars$mpg)

## Box Plots ##
boxplot(mtcars$mpg~mtcars$cyl)

# Boxplot with labels
boxplot(mpg~cyl,
        data=mtcars,
        main="Car Milage Data", 
        xlab="Number of Cylinders",
        ylab="Miles Per Gallon")

########################### PART II:Data Acquisition############################ 

### Step 1: Install & load required packages 
#install.packages(c(tigris,tmap,tidyverse,tablulizer,dplyr))
library(tigris)
library(tmap)
library(tidyverse)
library(tabulizer)
library(dplyr)
library(sf)

### Step 2: Extract a web PDF
# Explore file location to ensure accuracy:
website <- "http://artsandsciences.sc.edu/geog/hvri/sites/sc.edu.geog.hvri/files/attachments/SoVI_10_14_Website.pdf"
browseURL(url = website)

# Use URL location to extract pdf as a table
# When you're unfamilar with a function you can use the ?
?extract_tables
Sovi_table <- extract_tables(website)

# Lets view what exactly is extracted through this process
View(Sovi_table)

#What a mess???

### Step 3: Converting the web-based PDF into csv

# Lets use two more functions to convert the extracted table
# into a more usable and analysis friendly format
# do.call?
# rbind?
final <- do.call(rbind, Sovi_table[-length(Sovi_table)])

# Reformate table headers by dropping the first row
final <- as.data.frame(final[2:nrow(final), ])

# Lets lable the column names so they can merged with Census data
headers <- c('GEOID', 'State_FIP', 'County_FIP', 'County_Name', 'CNTY_SoVI', 
             'Percentile')

# Apply our names to the data frame
names(final) <- headers


# **NOTE** GEOID is the ID code for CENSUS data
# This is mandatory for the next section

### Step 4: Save the table as a csv 
# This is helpful for eliminating redundancy and reproducibility
write.csv(final, file='Data/SoVI.csv', row.names=FALSE)


########################### PART III: Mapping in R ############################# 

# We can start directly from the objects in our working environment
#Or we can load the data saved in Part 1: Step 4

### Step 1: Load SoVI data

# Load data from package location
df <- read.csv('Data/SoVI.csv')

# Load data from computer
#df <- read.csv('C:/temp/my_data/SoVI.csv')

# Step 2: Load spatial objects into R 
# In this case we want to load counties
# The tigris package is connected to the Census's database so we can pull data directly
# We want to pull the spatial objects counties and save them as an R object 

# NOTE: this might take a couple minutes due to the size of the file
# Question: How many counties are there in the USA?

Counties <- counties()
#Counties_sf <- st_as_sf(Counties)
#st_write(Counties_sf, dsn = 'Data/Counties.gpkg')
#st_write(Counties_sf, dsn = 'Data/Counties.csv', layer_options = "GEOMETRY=AS_XY")
Counties <- st_read('Data/Counties.csv', options=c("INTPTLON=x","INTPTLAT=y"))
Counties <- st_read('Data/Counties.gpkg')

# Lets examine the content of this large file
# Large SpatialPolygonDataFrame?
# 3233 elements and 130MB

View(Counties)
  #Data?
  #Polygons?
  #Proj4String?

# Step 3: Merge SoVI csv with our county region spatial object
# Explain merging works using a common field
US_SoVI <- merge(Counties,df, by = "GEOID", all = FALSE)

# Step 4: Lets make a simple plot to see the data
NOT WORKING!!

################################################

#State FIP Code for Florida is 12
US_SoVI_florida <- US_SoVI[US_SoVI$STATEFP=="12",]

map <- tm_shape(US_SoVI_florida) +
  tm_borders(alpha = 0.9) +
  tm_fill(col = "CNTY_SoVI",
          id = "NAME",
          popup.vars = c("NAME","CNTY_SoVI"))

#State FIP Code for Ohio is 39
US_SoVI_Ohio <- US_SoVI[US_SoVI$STATEFP=="39",]

map <- tm_shape(US_SoVI_Ohio) +
  tm_borders(alpha = 0.9) +
  tm_fill(col = "CNTY_SoVI",
          id = "NAME",
          popup.vars = c("NAME","CNTY_SoVI"))

tmap_leaflet(map)



#Saving a plot
jpeg('C:/temp/My_Awesome_Plot.jpg')

#Plot goes here!

dev.off()
